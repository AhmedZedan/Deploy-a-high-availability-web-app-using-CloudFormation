Description: >
  Ahmed Zedan / Udacity.
  Project: Deploy a high-availability web app using CloudFormation
  Servers Infrastructure.

Parameters:
  EnvironmentName:
    Description: This name will be prefixed to all the resources.
    Type: String
  ServerAMIId:
    Description: AMI ID for EC2 instances.
    Type: String
  InstanceType:
    Description: EC2 instance type
    Type: String

Resources:
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VpcId"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VpcId"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  

  S3BucketRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
                Service:
                    - ec2.amazonaws.com
            Action:
                - sts:AssumeRole
      Path: "/"

  S3BucketInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
        Path: "/"
        Roles:
            - Ref: S3BucketRole

  S3BucketPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3BucketPolicy
      PolicyDocument:
          Statement:
            - Effect: Allow
              Action:
                  - s3:*
              Resource: "*"
      Roles:
          - Ref: S3BucketRole

  WebAppLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          echo "Udacity Demo Web Server Up and Running!" > index.html
      ImageId: !Ref ServerAMIId
      IamInstanceProfile: !Ref S3BucketInstanceProfile
      KeyName: Udacity
      SecurityGroups:
          - Ref: WebServerSecurityGroup
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "10"
  WebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-Private-Subnets"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfiguration
      MinSize: '4'
      MaxSize: '6'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-Public-Subnet1"
      - Fn::ImportValue: !Sub "${EnvironmentName}-Public-Subnet2"
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup
  
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLoadBalancer
      Port: '80'
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'WebAppTargetGroup'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'Listener'
      Priority: 1
  
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VpcId"

Outputs:
  WebAppLBDNSName:
    Description: DNS name or Public URL of the Load Balancer
    Value: !Join ["", ["http://", !GetAtt WebAppLoadBalancer.DNSName]]
    Export:
      Name: !Sub ${EnvironmentName}-LoadBalancer-DNSName